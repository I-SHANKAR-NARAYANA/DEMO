import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.preprocessing import StandardScaler

iris = datasets.load_iris()
type(iris)

X = iris.data[:, :4]  # we only take the first four features.
X

y = iris.target
y

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.decomposition import PCA
pca4 = PCA()
X_train = pca4.fit_transform(X_train)
X_test = pca4.transform(X_test)

#Variance preserved by each PC
explained_variance = pca4.explained_variance_ratio_
print('explained variance=',explained_variance)
print('----------------------------------------')

from sklearn.ensemble import RandomForestClassifier
#Training and Making Predictions
classifier = RandomForestClassifier(max_depth=2, random_state=0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

#Performance Evaluation
cm = confusion_matrix(y_test, y_pred)
print(cm)
print('----------------------------\n')
print('Accuracy=' + str(accuracy_score(y_test, y_pred)))

pca2 = PCA(n_components=2)
X_train = pca2.fit_transform(X_train)
X_test = pca2.transform(X_test)
explained_variance = pca2.explained_variance_ratio_
print('explained variance=',explained_variance)
print('----------------------------\n')

classifier = RandomForestClassifier(max_depth=2, random_state=0)
classifier.fit(X_train, y_train)
# Predicting the Test set results
y_pred = classifier.predict(X_test)

#Performance evaluation with 2 components
cm = confusion_matrix(y_test, y_pred)
print(cm)
print('----------------------------\n')
print('Accuracy=' + str(accuracy_score(y_test, y_pred)))

pca1 = PCA(n_components=1)
X_train = pca1.fit_transform(X_train)
X_test = pca1.transform(X_test)
explained_variance = pca1.explained_variance_ratio_
print('explained variance=',explained_variance)
classifier = RandomForestClassifier(max_depth=2, random_state=0)
classifier.fit(X_train, y_train)
# Predicting the Test set results
y_pred = classifier.predict(X_test)
# Performance evaluation with 1 components
cm = confusion_matrix(y_test, y_pred)
print(cm)
print('----------------------------\n')
print('Accuracy=' + str(accuracy_score(y_test, y_pred)))
