import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Step 1: Data
X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)  # Hours Studied (Independent Variable)
Y = np.array([50, 55, 65, 70, 75])            # Score (Dependent Variable)

# Step 2: Fit the Linear Regression Model
model = LinearRegression()
model.fit(X, Y)



# Step 3: Make Predictions
Y_pred = model.predict(X)  # Predictions for the original data

# Predicting the score for a new data point (e.g., 6 hours studied)
new_data = np.array([6]).reshape(-1, 1)
new_prediction = model.predict(new_data)

# Step 4: Evaluation Metrics
mae = mean_absolute_error(Y, Y_pred)
mse = mean_squared_error(Y, Y_pred)
rmse = np.sqrt(mse)

r2 = r2_score(Y, Y_pred)
# Adjusted R-squared Calculation
n = len(Y)
k = 1  # Number of predictors
adjusted_r2 = 1 - ((1 - r2) * (n - 1) / (n - k - 1))

# Print Evaluation Metrics
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")
print(f"Adjusted R-squared: {adjusted_r2}")

# Display original and predicted values
print("\nOriginal vs Predicted Scores:")
for i in range(len(X)):
    print(f"Hours Studied: {X[i][0]}, Actual Score: {Y[i]}, Predicted Score: {Y_pred[i]:.2f}")

# Display prediction for new data
print(f"\nPrediction for new data (6 hours studied): {new_prediction[0]:.2f} score")

# Step 5: Visualize the Regression Line
plt.scatter(X, Y, color='blue', label='Actual Data')
plt.plot(X, Y_pred, color='red', label='Regression Line')
plt.scatter(new_data, new_prediction, color='green', label='New Prediction (6 hours)')
plt.xlabel('Hours Studied')
plt.ylabel('Score')
plt.title('Simple Linear Regression')
plt.legend()
plt.show()
