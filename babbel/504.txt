const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const alienRoutes = require('./controller/controller')

const app = express();

app.use(bodyParser.json());


// const url = "mongodb://localhost:27017/aliens"
const url = "mongodb://127.0.0.1:27020,127.0.0.1:27021,127.0.0.1:27022/aliens?replicaSet=m101"
mongoose.connect(url)
.then(() => {
  console.log('Connected to MongoDB');
}).catch(err => {
  console.error('Failed to connect to MongoDB', err);
});

app.use('/api/aliens', alienRoutes);

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
const mongoose = require('mongoose');

const alienSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  age: {
    type: Number,
    required: true
  },
  grade: {
    type: String,
    required: true
  }
});

const Alien = mongoose.model('Alien', alienSchema);

module.exports = Alien;
const express = require('express');
const router = express.Router();
const Alien = require('../models/alien');

router.post('/', async (req, res) => {
  try {
    const alien = new Alien(req.body);
    await alien.save();
    res.status(201).send(alien);
  } catch (error) {
    res.status(400).send(error);
  }
});

router.get('/', async (req, res) => {
  try {
    const aliens = await Alien.find();
    res.status(200).send(aliens);
  } catch (error) {
    res.status(500).send(error);
  }
});

router.get('/:id', async (req, res) => {
  try {
    const alien = await Alien.findById(req.params.id);
    if (!alien) return res.status(404).send();
    res.status(200).send(alien);
  } catch (error) {
    res.status(500).send(error);
  }
});

router.patch('/:id', async (req, res) => {
  try {
    const alien = await Alien.findById(req.params.id);
    if (!alien) return res.status(404).send();
    alien.grade = req.body.grade;
    alien.age = req.body.age;
    updatedAlien = await alien.save();
    res.status(200).send(updatedAlien);
  } catch (error) {
    res.status(400).send(error);
  }
});

router.delete('/:id', async (req, res) => {
  try {
    const alien = await Alien.findByIdAndDelete(req.params.id);
    if (!alien) return res.status(404).send();
    res.status(200).send(alien);
  } catch (error) {
    res.status(500).send(error);
  }
});

module.exports = router;
